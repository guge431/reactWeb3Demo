/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { ExchangeETH, ExchangeETHInterface } from "../ExchangeETH";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "hczToken",
    outputs: [
      {
        internalType: "contract MyCoin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
  {
    inputs: [],
    name: "buyTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526064600255348015610014575f80fd5b50604051610a68380380610a6883398181016040528101906100369190610119565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610144565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100e8826100bf565b9050919050565b6100f8816100de565b8114610102575f80fd5b50565b5f81519050610113816100ef565b92915050565b5f6020828403121561012e5761012d6100bb565b5b5f61013b84828501610105565b91505092915050565b610917806101515f395ff3fe608060405260043610610058575f3560e01c80630cf1b4ac1461006b5780632c4e722e146100955780633ccfd60b146100bf5780638da5cb5b146100d5578063d0febe4c146100ff578063de242ff41461010957610067565b3661006757610065610133565b005b5f80fd5b348015610076575f80fd5b5061007f610301565b60405161008c919061057b565b60405180910390f35b3480156100a0575f80fd5b506100a9610326565b6040516100b691906105ac565b60405180910390f35b3480156100ca575f80fd5b506100d361032c565b005b3480156100e0575f80fd5b506100e961041e565b6040516100f691906105e5565b60405180910390f35b610107610133565b005b348015610114575f80fd5b5061011d610441565b60405161012a91906105ac565b60405180910390f35b5f3411610175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016c90610658565b60405180910390fd5b5f6002543461018491906106a3565b90508060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101e191906105e5565b602060405180830381865afa1580156101fc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102209190610712565b1015610261576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610258906107ad565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016102bd9291906107cb565b6020604051808303815f875af11580156102d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102fd9190610827565b5050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b09061089c565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f1935050505015801561041b573d5f803e3d5ffd5b50565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306040518363ffffffff1660e01b81526004016104bd9291906108ba565b602060405180830381865afa1580156104d8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104fc9190610712565b905090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f61054361053e61053984610501565b610520565b610501565b9050919050565b5f61055482610529565b9050919050565b5f6105658261054a565b9050919050565b6105758161055b565b82525050565b5f60208201905061058e5f83018461056c565b92915050565b5f819050919050565b6105a681610594565b82525050565b5f6020820190506105bf5f83018461059d565b92915050565b5f6105cf82610501565b9050919050565b6105df816105c5565b82525050565b5f6020820190506105f85f8301846105d6565b92915050565b5f82825260208201905092915050565b7f53656e642045544820746f2062757920746f6b656e73000000000000000000005f82015250565b5f6106426016836105fe565b915061064d8261060e565b602082019050919050565b5f6020820190508181035f83015261066f81610636565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6106ad82610594565b91506106b883610594565b92508282026106c681610594565b915082820484148315176106dd576106dc610676565b5b5092915050565b5f80fd5b6106f181610594565b81146106fb575f80fd5b50565b5f8151905061070c816106e8565b92915050565b5f60208284031215610727576107266106e4565b5b5f610734848285016106fe565b91505092915050565b7f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e747261635f8201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b5f6107976021836105fe565b91506107a28261073d565b604082019050919050565b5f6020820190508181035f8301526107c48161078b565b9050919050565b5f6040820190506107de5f8301856105d6565b6107eb602083018461059d565b9392505050565b5f8115159050919050565b610806816107f2565b8114610810575f80fd5b50565b5f81519050610821816107fd565b92915050565b5f6020828403121561083c5761083b6106e4565b5b5f61084984828501610813565b91505092915050565b7f4f6e6c79206f776e65722063616e2077697468647261770000000000000000005f82015250565b5f6108866017836105fe565b915061089182610852565b602082019050919050565b5f6020820190508181035f8301526108b38161087a565b9050919050565b5f6040820190506108cd5f8301856105d6565b6108da60208301846105d6565b939250505056fea26469706673582212201655bb2755b8e737ad6bbec56b9bd9dc920aeb756e77c95bf264d8e10e6e084064736f6c63430008150033";

type ExchangeETHConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeETHConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeETH__factory extends ContractFactory {
  constructor(...args: ExchangeETHConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _tokenAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_tokenAddress, overrides || {});
  }
  override deploy(
    _tokenAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_tokenAddress, overrides || {}) as Promise<
      ExchangeETH & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExchangeETH__factory {
    return super.connect(runner) as ExchangeETH__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeETHInterface {
    return new Interface(_abi) as ExchangeETHInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ExchangeETH {
    return new Contract(address, _abi, runner) as unknown as ExchangeETH;
  }
}
