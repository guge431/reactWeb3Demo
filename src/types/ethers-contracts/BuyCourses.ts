/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BuyCoursesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "courseCountId"
      | "courses"
      | "hasPurchased"
      | "hczToken"
      | "token"
      | "addCourse"
      | "purchaseCourse"
      | "getCourse"
      | "hasUserPurchased"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CourseAdded" | "CoursePurchased"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "courseCountId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "courses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPurchased",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hczToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addCourse",
    values: [string, string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserPurchased",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "courseCountId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hczToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addCourse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCourse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasUserPurchased",
    data: BytesLike
  ): Result;
}

export namespace CourseAddedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    name: string,
    price: BigNumberish
  ];
  export type OutputTuple = [courseId: bigint, name: string, price: bigint];
  export interface OutputObject {
    courseId: bigint;
    name: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoursePurchasedEvent {
  export type InputTuple = [user: AddressLike, courseId: BigNumberish];
  export type OutputTuple = [user: string, courseId: bigint];
  export interface OutputObject {
    user: string;
    courseId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BuyCourses extends BaseContract {
  connect(runner?: ContractRunner | null): BuyCourses;
  waitForDeployment(): Promise<this>;

  interface: BuyCoursesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  courseCountId: TypedContractMethod<[], [bigint], "view">;

  courses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        id: bigint;
        name: string;
        description: string;
        price: bigint;
        teacher: string;
      }
    ],
    "view"
  >;

  hasPurchased: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  hczToken: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  addCourse: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _price: BigNumberish,
      _teacher: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  purchaseCourse: TypedContractMethod<
    [_courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCourse: TypedContractMethod<
    [_courseId: BigNumberish],
    [
      [string, string, bigint, string] & {
        name: string;
        description: string;
        price: bigint;
        teacher: string;
      }
    ],
    "view"
  >;

  hasUserPurchased: TypedContractMethod<
    [user: AddressLike, _courseId: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "courseCountId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "courses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string] & {
        id: bigint;
        name: string;
        description: string;
        price: bigint;
        teacher: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPurchased"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hczToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addCourse"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _price: BigNumberish,
      _teacher: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "purchaseCourse"
  ): TypedContractMethod<[_courseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCourse"
  ): TypedContractMethod<
    [_courseId: BigNumberish],
    [
      [string, string, bigint, string] & {
        name: string;
        description: string;
        price: bigint;
        teacher: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserPurchased"
  ): TypedContractMethod<
    [user: AddressLike, _courseId: BigNumberish],
    [boolean],
    "view"
  >;

  getEvent(
    key: "CourseAdded"
  ): TypedContractEvent<
    CourseAddedEvent.InputTuple,
    CourseAddedEvent.OutputTuple,
    CourseAddedEvent.OutputObject
  >;
  getEvent(
    key: "CoursePurchased"
  ): TypedContractEvent<
    CoursePurchasedEvent.InputTuple,
    CoursePurchasedEvent.OutputTuple,
    CoursePurchasedEvent.OutputObject
  >;

  filters: {
    "CourseAdded(uint256,string,uint256)": TypedContractEvent<
      CourseAddedEvent.InputTuple,
      CourseAddedEvent.OutputTuple,
      CourseAddedEvent.OutputObject
    >;
    CourseAdded: TypedContractEvent<
      CourseAddedEvent.InputTuple,
      CourseAddedEvent.OutputTuple,
      CourseAddedEvent.OutputObject
    >;

    "CoursePurchased(address,uint256)": TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;
    CoursePurchased: TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;
  };
}
